(ns speakeasy.jwt-test
  (:require [clojure.data.json :as json]
            [clojure.test :refer [deftest testing is]]
            [speakeasy.jwt :as sut])
  (:import [com.auth0.jwt.algorithms Algorithm]
           [java.security SecureRandom]
           [java.time Instant]
           [java.time.temporal ChronoUnit]
           [java.util Base64]))

(defn approx= [a b alpha]
  (< (abs (- a b)) alpha))

(deftest token
  (let [decoded-token (sut/decode (sut/token 1))
        expected-exp-time (.. (Instant/now)
                              (plus 1 (ChronoUnit/valueOf "MINUTES"))
                              getEpochSecond)]
    (testing "`token` sets expected header"
      (let [header (->> decoded-token
                        (.getHeader)
                        (.decode (Base64/getDecoder))
                        (String.)
                        json/read-str)]
        (is (= (header "alg") "HS512"))
        (is (= (header "typ") "JWT"))))

    (testing "`token` sets expected payload"
      (let [payload (->> decoded-token
                         (.getPayload)
                         (.decode (Base64/getDecoder))
                         (String.)
                         json/read-str)]
        (is (= (payload "iss") "speakeasy"))
        (is (approx= (payload "exp") expected-exp-time 1))))))

(deftest valid?
  (testing "`valid?` accepts a token generated by `token`"
    (dotimes [_ 10]
      (is (sut/valid? (sut/token 1)))))

  (testing "`valid?` rejects an invalid token"
    (is (not (sut/valid? (sut/token 1 (let [b (byte-array 128)]
                                        (.nextBytes (SecureRandom.) b)
                                        (Algorithm/HMAC512 b)))))))

  (testing "`valid?` rejects an expired token"
    (let [token (sut/token 0)]
      (Thread/sleep 1000)
      (is (not (sut/valid? token))))))
