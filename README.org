* ~speakeasy~

  The primary goal of ~speakeasy~ is to reduce the exposed attack surface for self hosted software. Replacing the full surface of
  the backing server with the smaller surface of a reverse proxy and authentication server.

** Considerations

   1. It should be /fairly/ easy to put this auth server in front of any other self-hosted server.
   2. The services protected by ~speakeasy~ aren't being intentionally, directly targeted. They may be scanned and attacked by bots or other automated tools.
   3. The expected volume of requests is pretty low. A few to a few dozen users are expected.
   4. There is less reason to identify each user since the server ~speakeasy~ is in front of will still want to identify the user.
   5. Short lived JWTs (for some value of "short lived") reduce the need for revocations.
   6. There is no admin. Anyone who can access the registration endpoints can register another key.
   7. A long lived request can stay open after the token is invalid because auth is checked once per request.
   8. Authenticator attestation is invasive. Any capable authenticator is probably fine.

** ~docker compose~ demo

   1. Start the servers with ~docker compose up -d~
   2. Visit http://localhost:3000/speakeasy to register a key
      1. Trying to register from http://localhost/speakeasy should result in error/failure
   3. Visit http://localhost/ and see the backend (example.com)
   4. Delete the cookie ~speakeasy-token~
   5. Visit http://localhost/ and see the speakeasy page
   6. Authenticate
   7. Visit http://localhost/ and see the backend

** Using ~speakeasy~

*** ~speakeasy~ setup

    TODO: Make speakeasy produce a production ready jar; put steps here to deploy it

*** Redis setup

    TODO: Suggest a process of setting up redis on the same host as the server

*** Nginx setup

    TODO: Nginx config

    https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-subrequest-authentication/
    https://developer.okta.com/blog/2018/08/28/nginx-auth-request

*** Let's Encrypt setup

    TODO: How to setup Let's Encrypt for a typical linux distro (maybe just links out)

*** Firewall thoughts

    TODO: Suggest limiting all ports except 443 and a port for ssh that isn't 22

*** Register the first key

    TODO: Describe a process of something like ~ssh -L...~ to set the inital key by bypassing the nginx server

